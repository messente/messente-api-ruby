=begin
#Messente API

#[Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.

The version of the OpenAPI document: 2.0.0
Contact: messente@messente.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module MessenteApi
  class NumberVerificationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # verify number
    # @param username [String] The API username
    # @param password [String] The API password
    # @param to [String] Receiver&#39;s phone number with the country code
    # @param [Hash] opts the optional parameters
    # @option opts [String] :template Template of the message, including PIN code. Placeholder for PIN code is &lt;PIN&gt;. When not set, default template is used: \&quot;Your Verification PIN code is &lt;PIN&gt;\&quot;. 
    # @option opts [String] :pin_length Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4.
    # @option opts [String] :from Sender name. When not set, the default Sender name \&quot;Verigator\&quot; is used. This sender ID also needs to be added to your account beforehand.
    # @option opts [String] :max_tries Maximum number of times the PIN code is sent in total. Defaults to \&quot;2\&quot; - initial PIN code and one retry. It is discouraged to set this value to \&quot;1\&quot; as only the initial PIN code is sent and retry is disabled.  
    # @option opts [String] :retry_delay For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds.
    # @option opts [String] :validity For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds).
    # @option opts [String] :ip IP address of the client making verification request.
    # @option opts [String] :browser User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;.
    # @option opts [String] :cookie Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.
    # @return [String]
    def verify_number(username, password, to, opts = {})
      data, _status_code, _headers = verify_number_with_http_info(username, password, to, opts)
      data
    end

    # verify number
    # @param username [String] The API username
    # @param password [String] The API password
    # @param to [String] Receiver&#39;s phone number with the country code
    # @param [Hash] opts the optional parameters
    # @option opts [String] :template Template of the message, including PIN code. Placeholder for PIN code is &lt;PIN&gt;. When not set, default template is used: \&quot;Your Verification PIN code is &lt;PIN&gt;\&quot;. 
    # @option opts [String] :pin_length Length of the PIN code. Minumum 4 digits, maximum 16. Defaults to 4.
    # @option opts [String] :from Sender name. When not set, the default Sender name \&quot;Verigator\&quot; is used. This sender ID also needs to be added to your account beforehand.
    # @option opts [String] :max_tries Maximum number of times the PIN code is sent in total. Defaults to \&quot;2\&quot; - initial PIN code and one retry. It is discouraged to set this value to \&quot;1\&quot; as only the initial PIN code is sent and retry is disabled.  
    # @option opts [String] :retry_delay For how long (in seconds) to wait for next retry, if the correct PIN code has not been entered yet? Defaults to 30 seconds.
    # @option opts [String] :validity For how long (in seconds) is the PIN code valid. Defaults to 5 minutes (300 seconds). Maximum 30 minutes (1800 seconds).
    # @option opts [String] :ip IP address of the client making verification request.
    # @option opts [String] :browser User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;.
    # @option opts [String] :cookie Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def verify_number_with_http_info(username, password, to, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NumberVerificationApi.verify_number ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling NumberVerificationApi.verify_number"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling NumberVerificationApi.verify_number"
      end
      # verify the required parameter 'to' is set
      if @api_client.config.client_side_validation && to.nil?
        fail ArgumentError, "Missing the required parameter 'to' when calling NumberVerificationApi.verify_number"
      end
      # resource path
      local_var_path = '/verify/start'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'username'] = username
      query_params[:'password'] = password
      query_params[:'to'] = to
      query_params[:'template'] = opts[:'template'] if !opts[:'template'].nil?
      query_params[:'pin_length'] = opts[:'pin_length'] if !opts[:'pin_length'].nil?
      query_params[:'from'] = opts[:'from'] if !opts[:'from'].nil?
      query_params[:'max_tries'] = opts[:'max_tries'] if !opts[:'max_tries'].nil?
      query_params[:'retry_delay'] = opts[:'retry_delay'] if !opts[:'retry_delay'].nil?
      query_params[:'validity'] = opts[:'validity'] if !opts[:'validity'].nil?
      query_params[:'ip'] = opts[:'ip'] if !opts[:'ip'].nil?
      query_params[:'browser'] = opts[:'browser'] if !opts[:'browser'].nil?
      query_params[:'cookie'] = opts[:'cookie'] if !opts[:'cookie'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiPassword', 'apiUsername']

      new_options = opts.merge(
        :operation => :"NumberVerificationApi.verify_number",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NumberVerificationApi#verify_number\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # verified the PIN code entered by the user.
    # @param username [String] The API username
    # @param password [String] The API password
    # @param verification_id [String] Verification ID returned by the successful verification request.
    # @param pin [String] PIN code entered by the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ip IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match.
    # @option opts [String] :browser User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;.
    # @option opts [String] :cookie Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.
    # @return [String]
    def verify_pin(username, password, verification_id, pin, opts = {})
      data, _status_code, _headers = verify_pin_with_http_info(username, password, verification_id, pin, opts)
      data
    end

    # verified the PIN code entered by the user.
    # @param username [String] The API username
    # @param password [String] The API password
    # @param verification_id [String] Verification ID returned by the successful verification request.
    # @param pin [String] PIN code entered by the user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ip IP address of the client making verification request. If the IP address is from another country, PIN is required even if the cookies match.
    # @option opts [String] :browser User Agent of the browser. For example \&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36\&quot;.
    # @option opts [String] :cookie Unique cookie assigned to this session. If a user tries logging in with the same cookie present, user is automatically logged in and no PIN code verification is needed.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def verify_pin_with_http_info(username, password, verification_id, pin, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NumberVerificationApi.verify_pin ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling NumberVerificationApi.verify_pin"
      end
      # verify the required parameter 'password' is set
      if @api_client.config.client_side_validation && password.nil?
        fail ArgumentError, "Missing the required parameter 'password' when calling NumberVerificationApi.verify_pin"
      end
      # verify the required parameter 'verification_id' is set
      if @api_client.config.client_side_validation && verification_id.nil?
        fail ArgumentError, "Missing the required parameter 'verification_id' when calling NumberVerificationApi.verify_pin"
      end
      # verify the required parameter 'pin' is set
      if @api_client.config.client_side_validation && pin.nil?
        fail ArgumentError, "Missing the required parameter 'pin' when calling NumberVerificationApi.verify_pin"
      end
      # resource path
      local_var_path = '/verify/pin'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'username'] = username
      query_params[:'password'] = password
      query_params[:'verification_id'] = verification_id
      query_params[:'pin'] = pin
      query_params[:'ip'] = opts[:'ip'] if !opts[:'ip'].nil?
      query_params[:'browser'] = opts[:'browser'] if !opts[:'browser'].nil?
      query_params[:'cookie'] = opts[:'cookie'] if !opts[:'cookie'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiPassword', 'apiUsername']

      new_options = opts.merge(
        :operation => :"NumberVerificationApi.verify_pin",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NumberVerificationApi#verify_pin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
