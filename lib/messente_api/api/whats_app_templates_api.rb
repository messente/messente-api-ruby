=begin
#Messente API

#[Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.

The version of the OpenAPI document: 2.0.0
Contact: messente@messente.com
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module MessenteApi
  class WhatsAppTemplatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a WhatsApp template
    # @param waba_id [String] The ID of the WABA
    # @param whatsapp_create_template_request [WhatsappCreateTemplateRequest] The WhatsApp template to create
    # @param [Hash] opts the optional parameters
    # @return [WhatsappCreateTemplateResponse]
    def create_whatsapp_template(waba_id, whatsapp_create_template_request, opts = {})
      data, _status_code, _headers = create_whatsapp_template_with_http_info(waba_id, whatsapp_create_template_request, opts)
      data
    end

    # Creates a WhatsApp template
    # @param waba_id [String] The ID of the WABA
    # @param whatsapp_create_template_request [WhatsappCreateTemplateRequest] The WhatsApp template to create
    # @param [Hash] opts the optional parameters
    # @return [Array<(WhatsappCreateTemplateResponse, Integer, Hash)>] WhatsappCreateTemplateResponse data, response status code and response headers
    def create_whatsapp_template_with_http_info(waba_id, whatsapp_create_template_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatsAppTemplatesApi.create_whatsapp_template ...'
      end
      # verify the required parameter 'waba_id' is set
      if @api_client.config.client_side_validation && waba_id.nil?
        fail ArgumentError, "Missing the required parameter 'waba_id' when calling WhatsAppTemplatesApi.create_whatsapp_template"
      end
      # verify the required parameter 'whatsapp_create_template_request' is set
      if @api_client.config.client_side_validation && whatsapp_create_template_request.nil?
        fail ArgumentError, "Missing the required parameter 'whatsapp_create_template_request' when calling WhatsAppTemplatesApi.create_whatsapp_template"
      end
      # resource path
      local_var_path = '/whatsapp/wabas/{wabaId}/templates'.sub('{' + 'wabaId' + '}', CGI.escape(waba_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(whatsapp_create_template_request)

      # return_type
      return_type = opts[:debug_return_type] || 'WhatsappCreateTemplateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"WhatsAppTemplatesApi.create_whatsapp_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatsAppTemplatesApi#create_whatsapp_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a WhatsApp template
    # @param waba_id [String] The ID of the WABA
    # @param name [String] The name of the template to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :hsm_id The ID of the template to delete
    # @return [Hash<String, Object>]
    def delete_whatsapp_template(waba_id, name, opts = {})
      data, _status_code, _headers = delete_whatsapp_template_with_http_info(waba_id, name, opts)
      data
    end

    # Deletes a WhatsApp template
    # @param waba_id [String] The ID of the WABA
    # @param name [String] The name of the template to delete
    # @param [Hash] opts the optional parameters
    # @option opts [String] :hsm_id The ID of the template to delete
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def delete_whatsapp_template_with_http_info(waba_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatsAppTemplatesApi.delete_whatsapp_template ...'
      end
      # verify the required parameter 'waba_id' is set
      if @api_client.config.client_side_validation && waba_id.nil?
        fail ArgumentError, "Missing the required parameter 'waba_id' when calling WhatsAppTemplatesApi.delete_whatsapp_template"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling WhatsAppTemplatesApi.delete_whatsapp_template"
      end
      # resource path
      local_var_path = '/whatsapp/wabas/{wabaId}/templates'.sub('{' + 'wabaId' + '}', CGI.escape(waba_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'name'] = name
      query_params[:'hsmId'] = opts[:'hsm_id'] if !opts[:'hsm_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"WhatsAppTemplatesApi.delete_whatsapp_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatsAppTemplatesApi#delete_whatsapp_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Requests a WhatsApp template with the given ID
    # @param waba_id [String] The ID of the WABA
    # @param template_id [String] The ID of the template to retrieve
    # @param [Hash] opts the optional parameters
    # @return [WhatsappTemplateResponse]
    def get_whatsapp_template_by_id(waba_id, template_id, opts = {})
      data, _status_code, _headers = get_whatsapp_template_by_id_with_http_info(waba_id, template_id, opts)
      data
    end

    # Requests a WhatsApp template with the given ID
    # @param waba_id [String] The ID of the WABA
    # @param template_id [String] The ID of the template to retrieve
    # @param [Hash] opts the optional parameters
    # @return [Array<(WhatsappTemplateResponse, Integer, Hash)>] WhatsappTemplateResponse data, response status code and response headers
    def get_whatsapp_template_by_id_with_http_info(waba_id, template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatsAppTemplatesApi.get_whatsapp_template_by_id ...'
      end
      # verify the required parameter 'waba_id' is set
      if @api_client.config.client_side_validation && waba_id.nil?
        fail ArgumentError, "Missing the required parameter 'waba_id' when calling WhatsAppTemplatesApi.get_whatsapp_template_by_id"
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling WhatsAppTemplatesApi.get_whatsapp_template_by_id"
      end
      # resource path
      local_var_path = '/whatsapp/wabas/{wabaId}/templates/{templateId}'.sub('{' + 'wabaId' + '}', CGI.escape(waba_id.to_s)).sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WhatsappTemplateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"WhatsAppTemplatesApi.get_whatsapp_template_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatsAppTemplatesApi#get_whatsapp_template_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Requests a list of WhatsApp templates
    # @param waba_id [String] The ID of the WABA
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (default to 25)
    # @option opts [String] :before A cursor point used for a paginated request to indicate the template to paginate backwards from.
    # @option opts [String] :after A cursor point used for a paginated request to indicate the template to paginate forwards from.
    # @option opts [WhatsappTemplateCategory] :category A filter for returning only templates matching a specific category.
    # @option opts [String] :content A search filter representing the content of a template. Only matching templates will be returned in the list.
    # @option opts [String] :language A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/) 
    # @option opts [String] :name A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list.
    # @option opts [WhatsappTemplateStatus] :status A filter for returning only templates matching a specific status.
    # @return [WhatsappListTemplatesResponse]
    def list_whatsapp_templates(waba_id, opts = {})
      data, _status_code, _headers = list_whatsapp_templates_with_http_info(waba_id, opts)
      data
    end

    # Requests a list of WhatsApp templates
    # @param waba_id [String] The ID of the WABA
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (default to 25)
    # @option opts [String] :before A cursor point used for a paginated request to indicate the template to paginate backwards from.
    # @option opts [String] :after A cursor point used for a paginated request to indicate the template to paginate forwards from.
    # @option opts [WhatsappTemplateCategory] :category A filter for returning only templates matching a specific category.
    # @option opts [String] :content A search filter representing the content of a template. Only matching templates will be returned in the list.
    # @option opts [String] :language A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/) 
    # @option opts [String] :name A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list.
    # @option opts [WhatsappTemplateStatus] :status A filter for returning only templates matching a specific status.
    # @return [Array<(WhatsappListTemplatesResponse, Integer, Hash)>] WhatsappListTemplatesResponse data, response status code and response headers
    def list_whatsapp_templates_with_http_info(waba_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatsAppTemplatesApi.list_whatsapp_templates ...'
      end
      # verify the required parameter 'waba_id' is set
      if @api_client.config.client_side_validation && waba_id.nil?
        fail ArgumentError, "Missing the required parameter 'waba_id' when calling WhatsAppTemplatesApi.list_whatsapp_templates"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 500
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling WhatsAppTemplatesApi.list_whatsapp_templates, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] < 1
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling WhatsAppTemplatesApi.list_whatsapp_templates, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/whatsapp/wabas/{wabaId}/templates'.sub('{' + 'wabaId' + '}', CGI.escape(waba_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?
      query_params[:'category'] = opts[:'category'] if !opts[:'category'].nil?
      query_params[:'content'] = opts[:'content'] if !opts[:'content'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'WhatsappListTemplatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"WhatsAppTemplatesApi.list_whatsapp_templates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatsAppTemplatesApi#list_whatsapp_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a WhatsApp template
    # @param waba_id [String] The ID of the WABA
    # @param template_id [String] The ID of the template to update
    # @param whatsapp_update_template_request [WhatsappUpdateTemplateRequest] The template data to be updated
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def update_whatsapp_template(waba_id, template_id, whatsapp_update_template_request, opts = {})
      data, _status_code, _headers = update_whatsapp_template_with_http_info(waba_id, template_id, whatsapp_update_template_request, opts)
      data
    end

    # Updates a WhatsApp template
    # @param waba_id [String] The ID of the WABA
    # @param template_id [String] The ID of the template to update
    # @param whatsapp_update_template_request [WhatsappUpdateTemplateRequest] The template data to be updated
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def update_whatsapp_template_with_http_info(waba_id, template_id, whatsapp_update_template_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WhatsAppTemplatesApi.update_whatsapp_template ...'
      end
      # verify the required parameter 'waba_id' is set
      if @api_client.config.client_side_validation && waba_id.nil?
        fail ArgumentError, "Missing the required parameter 'waba_id' when calling WhatsAppTemplatesApi.update_whatsapp_template"
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling WhatsAppTemplatesApi.update_whatsapp_template"
      end
      # resource path
      local_var_path = '/whatsapp/wabas/{wabaId}/templates/{templateId}'.sub('{' + 'wabaId' + '}', CGI.escape(waba_id.to_s)).sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(whatsapp_update_template_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['basicAuth']

      new_options = opts.merge(
        :operation => :"WhatsAppTemplatesApi.update_whatsapp_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WhatsAppTemplatesApi#update_whatsapp_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
